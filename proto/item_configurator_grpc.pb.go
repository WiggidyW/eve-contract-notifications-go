// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: item_configurator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ItemConfiguratorClient is the client API for ItemConfigurator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ItemConfiguratorClient interface {
	Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateRep, error)
	List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListRep, error)
	ListCharacters(ctx context.Context, in *ListCharactersReq, opts ...grpc.CallOption) (*ListCharactersRep, error)
	AddCharacters(ctx context.Context, in *AddCharactersReq, opts ...grpc.CallOption) (*AddCharactersRep, error)
	DelCharacters(ctx context.Context, in *DelCharactersReq, opts ...grpc.CallOption) (*DelCharactersRep, error)
	BuybackContracts(ctx context.Context, in *BuybackContractsReq, opts ...grpc.CallOption) (*BuybackContractsRep, error)
}

type itemConfiguratorClient struct {
	cc grpc.ClientConnInterface
}

func NewItemConfiguratorClient(cc grpc.ClientConnInterface) ItemConfiguratorClient {
	return &itemConfiguratorClient{cc}
}

func (c *itemConfiguratorClient) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateRep, error) {
	out := new(UpdateRep)
	err := c.cc.Invoke(ctx, "/item_configurator_proto.ItemConfigurator/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemConfiguratorClient) List(ctx context.Context, in *ListReq, opts ...grpc.CallOption) (*ListRep, error) {
	out := new(ListRep)
	err := c.cc.Invoke(ctx, "/item_configurator_proto.ItemConfigurator/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemConfiguratorClient) ListCharacters(ctx context.Context, in *ListCharactersReq, opts ...grpc.CallOption) (*ListCharactersRep, error) {
	out := new(ListCharactersRep)
	err := c.cc.Invoke(ctx, "/item_configurator_proto.ItemConfigurator/ListCharacters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemConfiguratorClient) AddCharacters(ctx context.Context, in *AddCharactersReq, opts ...grpc.CallOption) (*AddCharactersRep, error) {
	out := new(AddCharactersRep)
	err := c.cc.Invoke(ctx, "/item_configurator_proto.ItemConfigurator/AddCharacters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemConfiguratorClient) DelCharacters(ctx context.Context, in *DelCharactersReq, opts ...grpc.CallOption) (*DelCharactersRep, error) {
	out := new(DelCharactersRep)
	err := c.cc.Invoke(ctx, "/item_configurator_proto.ItemConfigurator/DelCharacters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *itemConfiguratorClient) BuybackContracts(ctx context.Context, in *BuybackContractsReq, opts ...grpc.CallOption) (*BuybackContractsRep, error) {
	out := new(BuybackContractsRep)
	err := c.cc.Invoke(ctx, "/item_configurator_proto.ItemConfigurator/BuybackContracts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ItemConfiguratorServer is the server API for ItemConfigurator service.
// All implementations must embed UnimplementedItemConfiguratorServer
// for forward compatibility
type ItemConfiguratorServer interface {
	Update(context.Context, *UpdateReq) (*UpdateRep, error)
	List(context.Context, *ListReq) (*ListRep, error)
	ListCharacters(context.Context, *ListCharactersReq) (*ListCharactersRep, error)
	AddCharacters(context.Context, *AddCharactersReq) (*AddCharactersRep, error)
	DelCharacters(context.Context, *DelCharactersReq) (*DelCharactersRep, error)
	BuybackContracts(context.Context, *BuybackContractsReq) (*BuybackContractsRep, error)
	mustEmbedUnimplementedItemConfiguratorServer()
}

// UnimplementedItemConfiguratorServer must be embedded to have forward compatible implementations.
type UnimplementedItemConfiguratorServer struct {
}

func (UnimplementedItemConfiguratorServer) Update(context.Context, *UpdateReq) (*UpdateRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedItemConfiguratorServer) List(context.Context, *ListReq) (*ListRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedItemConfiguratorServer) ListCharacters(context.Context, *ListCharactersReq) (*ListCharactersRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCharacters not implemented")
}
func (UnimplementedItemConfiguratorServer) AddCharacters(context.Context, *AddCharactersReq) (*AddCharactersRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCharacters not implemented")
}
func (UnimplementedItemConfiguratorServer) DelCharacters(context.Context, *DelCharactersReq) (*DelCharactersRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelCharacters not implemented")
}
func (UnimplementedItemConfiguratorServer) BuybackContracts(context.Context, *BuybackContractsReq) (*BuybackContractsRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuybackContracts not implemented")
}
func (UnimplementedItemConfiguratorServer) mustEmbedUnimplementedItemConfiguratorServer() {}

// UnsafeItemConfiguratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ItemConfiguratorServer will
// result in compilation errors.
type UnsafeItemConfiguratorServer interface {
	mustEmbedUnimplementedItemConfiguratorServer()
}

func RegisterItemConfiguratorServer(s grpc.ServiceRegistrar, srv ItemConfiguratorServer) {
	s.RegisterService(&ItemConfigurator_ServiceDesc, srv)
}

func _ItemConfigurator_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemConfiguratorServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/item_configurator_proto.ItemConfigurator/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemConfiguratorServer).Update(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemConfigurator_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemConfiguratorServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/item_configurator_proto.ItemConfigurator/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemConfiguratorServer).List(ctx, req.(*ListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemConfigurator_ListCharacters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCharactersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemConfiguratorServer).ListCharacters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/item_configurator_proto.ItemConfigurator/ListCharacters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemConfiguratorServer).ListCharacters(ctx, req.(*ListCharactersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemConfigurator_AddCharacters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCharactersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemConfiguratorServer).AddCharacters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/item_configurator_proto.ItemConfigurator/AddCharacters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemConfiguratorServer).AddCharacters(ctx, req.(*AddCharactersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemConfigurator_DelCharacters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelCharactersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemConfiguratorServer).DelCharacters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/item_configurator_proto.ItemConfigurator/DelCharacters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemConfiguratorServer).DelCharacters(ctx, req.(*DelCharactersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ItemConfigurator_BuybackContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuybackContractsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ItemConfiguratorServer).BuybackContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/item_configurator_proto.ItemConfigurator/BuybackContracts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ItemConfiguratorServer).BuybackContracts(ctx, req.(*BuybackContractsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ItemConfigurator_ServiceDesc is the grpc.ServiceDesc for ItemConfigurator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ItemConfigurator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "item_configurator_proto.ItemConfigurator",
	HandlerType: (*ItemConfiguratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _ItemConfigurator_Update_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ItemConfigurator_List_Handler,
		},
		{
			MethodName: "ListCharacters",
			Handler:    _ItemConfigurator_ListCharacters_Handler,
		},
		{
			MethodName: "AddCharacters",
			Handler:    _ItemConfigurator_AddCharacters_Handler,
		},
		{
			MethodName: "DelCharacters",
			Handler:    _ItemConfigurator_DelCharacters_Handler,
		},
		{
			MethodName: "BuybackContracts",
			Handler:    _ItemConfigurator_BuybackContracts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "item_configurator.proto",
}
